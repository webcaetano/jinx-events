import flash.events.Event;
import flash.events.MouseEvent;
import flash.display.*;
import flash.utils.*;

var eventsTypes = {
	enterFrame:{'is':Event,'do':'ENTER_FRAME'},
	removed:{'is':Event,'do':'REMOVED'},
	load:{'is':Event,'do':'ACTIVATE'},
	mouseMove:{'is':MouseEvent,'do':'MOUSE_MOVE'},
	mouseUp:{'is':MouseEvent,'do':'MOUSE_UP'},
	mouseDown:{'is':MouseEvent,'do':'MOUSE_DOWN'},
	mouseOver:{'is':MouseEvent,'do':'MOUSE_OVER'},
	mouseOut:{'is':MouseEvent,'do':'MOUSE_OUT'},
	releaseOutside:{'is':MouseEvent,'do':'RELEASE_OUTSIDE'},
	click:{'is':MouseEvent,'do':'CLICK'},
	mouseWhell:{'is':MouseEvent,'do':'MOUSE_WHEEL'},
	rollOut:{'is':MouseEvent,'do':'ROLL_OUT'},
	rollOver:{'is':MouseEvent,'do':'ROLL_OVER'},
	rightClick:{'is':MouseEvent,'do':'RIGHT_MOUSE_DOWN'}
}

var _isNumber = function(n) {
	return !isNaN(parseFloat(n)) && isFinite(n);
}

var _nextNewIndex = function(obj){
	var c=0;
	for(var i in obj) if(_isNumber(i)) c++;
	return c;
}

var _extend = function (destObj) {
	for (var i = 1; i < arguments.length; i++) {
		for (var key in arguments[i]) {
			destObj[key] = arguments[i][key];
		}
	}
	return destObj;
};

MovieClip.prototype.$bind = function(typeEvent,callback,options){
	var defaults = {
		buttonMode:true,
		useHandCursor:true,
		mouseChildren:false,
		id:null
	};

	options = _extend({}, defaults, options);

	if(eventsTypes[typeEvent]['is'] === MouseEvent){
		this.mouseChildren=options.mouseChildren;
		this.buttonMode=options.buttonMode;
		this.useHandCursor=options.useHandCursor;
	}

	if(!this.bindFuncs) this.bindFuncs={};
	if(!this.bindFuncs[eventsTypes[typeEvent]['do']]) this.bindFuncs[eventsTypes[typeEvent]['do']]={};

	var bindFunc = function(e){
		if(callback) callback.call(e.target,e,this);
	};

	this.addEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],bindFunc);

	if(!options.id){
		this.bindFuncs[eventsTypes[typeEvent]['do']][_nextNewIndex(this.bindFuncs[eventsTypes[typeEvent]['do']])]=bindFunc;
	} else {
		this.bindFuncs[eventsTypes[typeEvent]['do']][options.id]=bindFunc;
	}

	return this;
}

MovieClip.prototype.$unbind = function(typeEvent,options){
	if(!this.bindFuncs || !this.bindFuncs[eventsTypes[typeEvent]['do']] || this.bindFuncs[eventsTypes[typeEvent]['do']].length==0) return this;
	var i;
	var defaults = {
		keepCursor:false,
		id:null
	};

	options = _extend({}, defaults, options);

	if(eventsTypes[typeEvent]['is'] === MouseEvent){
		var d=true;
		for (var index in eventsTypes) {
			if(eventsTypes[index]['is'] !== MouseEvent) continue;

			for(i in this.bindFuncs[eventsTypes[index]['do']]){
				d=false;
				break;
			}
			if(!d)break;
		}

		if(!d && !options.keepCursor){
			this.buttonMode = false;
			this.useHandCursor = false;
		}
	}

	if(typeof options.id == 'function'){
		for(i in this.bindFuncs[eventsTypes[typeEvent]['do']]){
			if(this.bindFuncs[eventsTypes[typeEvent]['do']][i]==options.id){
				this.removeEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],this.bindFuncs[eventsTypes[typeEvent]['do']][i]);
				return this;
			}
		}
	}

	if(!options.id){
		for(i in this.bindFuncs[eventsTypes[typeEvent]['do']]){
			this.removeEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],this.bindFuncs[eventsTypes[typeEvent]['do']][i]);
		}
		return this;
	}

	if(
	this.bindFuncs &&
	this.bindFuncs[eventsTypes[typeEvent]['do']] &&
	this.bindFuncs[eventsTypes[typeEvent]['do']][options.id]
	){
		this.removeEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],this.bindFuncs[eventsTypes[typeEvent]['do']][options.id]);
		delete this.bindFuncs[eventsTypes[typeEvent]['do']][options.id];
	}
	return this;
}

MovieClip.prototype.$unbindAll = function(typeEvent=null){
	if(!this.bindFuncs) return this;
	var i, k, c=0;
	for(i in this.bindFuncs) c++; //count attr in obj
	if(!c) return this;

	for (i in eventsTypes){
		for(k in this.bindFuncs[eventsTypes[i]['do']]){
			if(typeEvent && typeEvent!=i) continue;
			this.removeEventListener(eventsTypes[i]['is'][eventsTypes[i]['do']],this.bindFuncs[eventsTypes[i]['do']][k]);
		}
	}
	this.buttonMode = false;
	this.useHandCursor = false;

	return this;
}

/* ALIAS */
MovieClip.prototype.$click = function(callback,idFunc=null){
	return this.$bind('click',callback,idFunc);
}

MovieClip.prototype.$hover = MovieClip.prototype.$mouseOver = function(callback,callback2=null){
	if(!callback2){
		return this.$bind('mouseOver',callback);
	} else {
		return this.$bind('mouseOver',callback).$bind('mouseOut',callback2);
	}
}

MovieClip.prototype.$mouseMove = function(callback){
	return this.$bind('mouseMove',callback);
}

MovieClip.prototype.$mouseOut = function(callback){
	return this.$bind('mouseOut',callback);
}

MovieClip.prototype.$mouseDown = function(callback,callback2=null){
	if(!callback2){
		return this.$bind('mouseDown',callback);
	} else {
		return this.$bind('mouseDown',callback).$bind('mouseUp',callback2).$bind('releaseOutside',callback2);
	}
}

MovieClip.prototype.$mouseUp = function(callback){
	return this.$bind('mouseUp',callback);
}

MovieClip.prototype.$enterFrame = function(callback){
	return this.$bind('enterFrame',callback);
}
