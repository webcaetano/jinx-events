/* START EVENTS TRIGGERS */
var $getEventTypes = function(){
	var eventsTypes = [];
		eventsTypes['enterFrame']={'is':Event,'do':'ENTER_FRAME'};
		eventsTypes['removed']={'is':Event,'do':'REMOVED'};
		eventsTypes['load']={'is':Event,'do':'ACTIVATE'};
		eventsTypes['mouseMove']={'is':MouseEvent,'do':'MOUSE_MOVE'};
		eventsTypes['mouseUp']={'is':MouseEvent,'do':'MOUSE_UP'};
		eventsTypes['mouseDown']={'is':MouseEvent,'do':'MOUSE_DOWN'};
		eventsTypes['mouseOver']={'is':MouseEvent,'do':'MOUSE_OVER'};
		eventsTypes['mouseOut']={'is':MouseEvent,'do':'MOUSE_OUT'};
		eventsTypes['releaseOutside']={'is':MouseEvent,'do':'RELEASE_OUTSIDE'};
		eventsTypes['click']={'is':MouseEvent,'do':'CLICK'};
		eventsTypes['mouseWhell']={'is':MouseEvent,'do':'MOUSE_WHEEL'};
		eventsTypes['rollOut']={'is':MouseEvent,'do':'ROLL_OUT'};
		eventsTypes['rollOver']={'is':MouseEvent,'do':'ROLL_OVER'};
		eventsTypes['rightClick']={'is':MouseEvent,'do':'RIGHT_MOUSE_DOWN'};
	return eventsTypes;
}

MovieClip.prototype.$bind = function(typeEvent,callbackOrOptions,callback2=null,idFunc=null){
	var callback;
	var options;
	if(typeof callbackOrOptions === 'object'){
		options={
			'hand':callbackOrOptions.hand
		};
		callback=callback2;
	} else {
		options={
			'hand':true
		};
		callback=callbackOrOptions;
	}
	if(typeof callback2 !== 'function') idFunc=callback2;

	var eventsTypes = $getEventTypes();

	if(eventsTypes[typeEvent]['is'] === MouseEvent){
		this.$set('mouseChildren',false)
		.$if(options.hand)
		.$set({'buttonMode':true,'useHandCursor':true});
	}

	if(!this.bindFuncs) this.bindFuncs={};
	if(!this.bindFuncs[eventsTypes[typeEvent]['do']]) this.bindFuncs[eventsTypes[typeEvent]['do']]={};

	var tmpvar;
	this.addEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],tmpvar = function(e){
		if(callback!=null)callback.call(e.target,e,tmpvar);
	});
	if(!idFunc){
		this.bindFuncs[eventsTypes[typeEvent]['do']][$nextNewIndex(this.bindFuncs[eventsTypes[typeEvent]['do']])]=tmpvar;
	} else {
		this.bindFuncs[eventsTypes[typeEvent]['do']][idFunc]=tmpvar;
	}

	return this;
}

MovieClip.prototype.$unbind = function(typeEvent,idFunc=null,keepCursor=false){
	var eventsTypes = $getEventTypes(), i;

	if(!this.bindFuncs || !this.bindFuncs[eventsTypes[typeEvent]['do']] || this.bindFuncs[eventsTypes[typeEvent]['do']].length==0) return this;

	if(eventsTypes[typeEvent]['is'] === MouseEvent){
		var d=true;
		for (var index in eventsTypes) {
			if(eventsTypes[index]['is'] !== MouseEvent) continue;

			for(i in this.bindFuncs[eventsTypes[index]['do']]){
				d=false;
				break;
			}
			if(!d)break;
		}

		this.$if(!d && !keepCursor).$set({'buttonMode':false,'useHandCursor':false});
	}

	if(typeof idFunc == 'function'){

		for(i in this.bindFuncs[eventsTypes[typeEvent]['do']]){
			if(this.bindFuncs[eventsTypes[typeEvent]['do']][i]==idFunc){
				this.removeEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],this.bindFuncs[eventsTypes[typeEvent]['do']][i]);
				return this;
			}
		}
	}

	if(!idFunc){
		for(i in this.bindFuncs[eventsTypes[typeEvent]['do']]){
			this.removeEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],this.bindFuncs[eventsTypes[typeEvent]['do']][i]);
		}
		return this;
	}

	if(
	this.bindFuncs &&
	this.bindFuncs[eventsTypes[typeEvent]['do']] &&
	this.bindFuncs[eventsTypes[typeEvent]['do']][idFunc]
	){
		this.removeEventListener(eventsTypes[typeEvent]['is'][eventsTypes[typeEvent]['do']],this.bindFuncs[eventsTypes[typeEvent]['do']][idFunc]);
		delete this.bindFuncs[eventsTypes[typeEvent]['do']][idFunc];
	}
	return this;
}

MovieClip.prototype.$unbindAll = function(typeEvent=null){
	if(!this.bindFuncs) return this;
	var i, c=0;
	for(i in this.bindFuncs) c++;
	if(c==0) return this;
	var eventsTypes = $getEventTypes();
	for (var index in eventsTypes){
		for(i in this.bindFuncs[eventsTypes[index]['do']]){
			if(typeEvent && typeEvent!=index) continue;
			this.removeEventListener(eventsTypes[index]['is'][eventsTypes[index]['do']],this.bindFuncs[eventsTypes[index]['do']][i]);
		}
	}
	this.$set({'buttonMode':false,'useHandCursor':false});

	return this;
}

var $releaseOutside = function(callback){
	/* SCHEMA : HAVE TO BE PUT INSIDE MOUSE BINDS
	$bind('click or other mouse event',function(){
		>here<
	})*/
	if(callback==null) return;

	var tmpvar;
	stage.addEventListener(MouseEvent.MOUSE_UP, tmpvar = function(e){
		callback.call(e.target,e);
		stage.removeEventListener(MouseEvent.MOUSE_UP, tmpvar);
	});
}

/* REG ALIAS */

MovieClip.prototype.$click = function(callback,idFunc=null){
	return this.$bind('click',callback,idFunc);
}

MovieClip.prototype.$hover = MovieClip.prototype.$mouseOver = function(callback,callback2=null){
	if(!callback2){
		return this.$bind('mouseOver',callback);
	} else {
		return this.$bind('mouseOver',callback).$bind('mouseOut',callback2);
	}
}

MovieClip.prototype.$mouseMove = function(callback){
	return this.$bind('mouseMove',callback);
}

MovieClip.prototype.$mouseOut = function(callback){
	return this.$bind('mouseOut',callback);
}

MovieClip.prototype.$mouseDown = function(callback,callback2=null){
	if(!callback2){
		return this.$bind('mouseDown',callback);
	} else {
		return this.$bind('mouseDown',callback).$bind('mouseUp',callback2).$bind('releaseOutside',callback2);
	}
}

MovieClip.prototype.$mouseUp = function(callback){
	return this.$bind('mouseUp',callback);
}

MovieClip.prototype.$enterFrame = function(callback){
	return this.$bind('enterFrame',callback);
}
